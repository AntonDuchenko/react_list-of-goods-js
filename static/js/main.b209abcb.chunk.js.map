{"version":3,"sources":["components/GoodsList/GoodsList.jsx","variables/variables.jsx","App.jsx","services/prepareListOfGoods/prepareListOfGoods.jsx","index.jsx"],"names":["GoodsList","goods","map","good","goodsFromServer","SORT_METHOD_ALPHABET","SORT_METHOD_LENGTH","App","useState","sortField","setSortField","reversed","setReversed","visibleGoods","preparedGoods","sort","good1","good2","localeCompare","length","reverse","prepareListOfGoods","className","onClick","type","cn","ReactDOM","render","document","getElementById"],"mappings":"0OAAaA,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACvB,6BACGA,EAAMC,KAAI,SAAAC,GAAI,OACb,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,S,OCHjBC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGWC,EAAuB,WACvBC,EAAqB,SCH3B,IAAMC,EAAM,WACjB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAgCF,oBAAS,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACMC,ECXD,SAA4BZ,EAAOQ,EAAWE,GACnD,IAAMG,EAAa,YAAOV,GAqB1B,OAnBIK,GACFK,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQR,GACN,KAAKJ,EACH,OAAOW,EAAME,cAAcD,GAE7B,KAAKX,EACH,OAAOU,EAAMG,OAASF,EAAME,OAE9B,QACE,OAAO,MAKXR,GACFG,EAAcM,UAGTN,EDVHO,CAAmBjB,EAAiBK,EAAWE,GAOnD,OACE,sBAAKW,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMb,EAAaL,IAC5BmB,KAAK,SACLF,UAAS,yBAAoBG,IAAG,CAAE,WAAYhB,IAAcJ,KAH9D,iCAQA,wBACEkB,QAAS,kBAAMb,EAAaJ,IAC5BkB,KAAK,SACLF,UAAS,4BAAuBG,IAAG,CAAE,WAAYhB,IAAcH,KAHjE,4BAQA,wBACEiB,QAAS,kBAAMX,GAAaD,IAC5Ba,KAAK,SACLF,UAAS,4BAAuBG,IAAG,CAAE,YAAad,KAHpD,sBAQEF,GAAaE,IACb,wBACEY,QAlCI,WACZb,EAAa,IACbE,GAAY,IAiCJY,KAAK,SACLF,UAAU,4BAHZ,sBAUJ,cAAC,EAAD,CAAWrB,MAAOY,QEzDxBa,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.b209abcb.chunk.js","sourcesContent":["export const GoodsList = ({ goods }) => (\n  <ul>\n    {goods.map(good => (\n      <li data-cy=\"Good\" key={good}>\n        {good}\n      </li>\n    ))}\n  </ul>\n);\n","export const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nexport const SORT_METHOD_ALPHABET = 'alphabet';\nexport const SORT_METHOD_LENGTH = 'length';\n","import 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\n\nimport { useState } from 'react';\nimport { GoodsList } from './components/GoodsList/GoodsList';\nimport { prepareListOfGoods } from './services/prepareListOfGoods';\nimport {\n  goodsFromServer, SORT_METHOD_ALPHABET, SORT_METHOD_LENGTH,\n} from './variables/variables';\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [reversed, setReversed] = useState(false);\n  const visibleGoods\n    = prepareListOfGoods(goodsFromServer, sortField, reversed);\n\n  const reset = () => {\n    setSortField('');\n    setReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => setSortField(SORT_METHOD_ALPHABET)}\n          type=\"button\"\n          className={`button is-info ${cn({ 'is-light': sortField !== SORT_METHOD_ALPHABET })}`}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => setSortField(SORT_METHOD_LENGTH)}\n          type=\"button\"\n          className={`button is-success ${cn({ 'is-light': sortField !== SORT_METHOD_LENGTH })}`}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={() => setReversed(!reversed)}\n          type=\"button\"\n          className={`button is-warning ${cn({ 'is-light': !reversed })}`}\n        >\n          Reverse\n        </button>\n\n        {(sortField || reversed) && (\n          <button\n            onClick={reset}\n            type=\"button\"\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <GoodsList goods={visibleGoods} />\n    </div>\n  );\n};\n","import { goodsFromServer,\n  SORT_METHOD_ALPHABET, SORT_METHOD_LENGTH } from '../../variables/variables';\n\nexport function prepareListOfGoods(goods, sortField, reversed) {\n  const preparedGoods = [...goodsFromServer];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SORT_METHOD_ALPHABET:\n          return good1.localeCompare(good2);\n\n        case SORT_METHOD_LENGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}